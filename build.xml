<project name="CBC" default="help">

  <!-- TODO - modify the following as needed:  -->
  <property name="jar.jython"          value="./jython-standalone-2.7.0.jar"/>
  <property name="jar.bsf"             value="./bsf.jar"/>
  <property name="jar.commons-logging" value="./commons-logging-1.2.jar"/>

  <taskdef resource="net/sf/antcontrib/antcontrib.properties"/>

  <target  name="help">
    <echo>To use this script type build followed by one or more targets.
    (Use build -p for a list of targets.)&#13;&#10;
    The normal target to run the process from input mp3 file to web page upload is: 
      build weekly_sermon&#13;&#10;
    The weekly_sermon target runs the following targets:
      modify_html_file
      ftp_file&#13;&#10;
    If any of the above encounters an error you may need to or want to restart with a particular target.&#13;&#10;
    If you have to rerun the ftp_file target (not uncommon) note the name of the mp3 file created
    and run it like this:
      build ftp_file -Dftp.file=ServerFiles/cbcserm12.24.2011.mp3 -Dftp.binary.mode=true
      build ftp_file -Dftp.file=ServerFiles/cbcmedia.html
    &#13;&#10;
    At the end of the year, after all sermons have been processed run: build year_change&#13;&#10;
    </echo>
  </target>


  <target name="get_sermon_file_name"
          unless="latest.mp3.file"
          description="Obtains the latest MP3 file from specified drive (defaults to F:\).">
    <echo/>
    <input
      message="RESPOND - Input the memory stick drive letter - press enter to accept the default:"
      addproperty="input.mp3.dir"
      defaultvalue="F:"/>

    <timestampselector property="latest.mp3.file">
    <path>
      <fileset dir="${input.mp3.dir}/">
        <include name="*.mp3" />
      </fileset>
    </path>
    </timestampselector>

    <echo message="INFO - Latest MP3 file is:  ${latest.mp3.file}" />

  </target>


  <target name="parse_date_from_file"
    depends="get_sermon_file_name"
    description="">
    <property name="mp3.file" value="${latest.mp3.file}"/>
  
    <loadresource property="cbc.sermon.year">
      <propertyresource name="mp3.file"/>
      <filterchain>
        <tokenfilter>
          <filetokenizer/>
          <replaceregex pattern="(.:\\)(\d\d)(\d\d\d\d_\d\d\d\d.mp3)" replace="\2" />
       </tokenfilter>
      </filterchain>
    </loadresource>

    <loadresource property="cbc.sermon.month">
      <propertyresource name="mp3.file"/>
      <filterchain>
        <tokenfilter>
          <filetokenizer/>
          <replaceregex pattern="(.:\\\d\d)(\d\d)(\d\d_\d\d\d\d.mp3)" replace="\2" />
       </tokenfilter>
      </filterchain>
    </loadresource>
 

    <loadresource property="cbc.sermon.day">
      <propertyresource name="mp3.file"/>
      <filterchain>
        <tokenfilter>
          <filetokenizer/>
          <replaceregex pattern="(.:\\\d\d\d\d)(\d\d)(_\d\d\d\d.mp3)" replace="\2" />
       </tokenfilter>
      </filterchain>
    </loadresource>
  </target>


  <target name="weekly_sermon"
          depends="parse_date_from_file"
          description="Copy MP3 file, update HTML, and FTP to web site.">

     <antcall target="verify_sunday">
       <param name="cbc.sermon.month" value="${cbc.sermon.month}"/>
       <param name="cbc.sermon.day" value="${cbc.sermon.day}"/>
       <param name="cbc.sermon.year" value="${cbc.sermon.year}"/>
     </antcall>

     <input
       message="RESPOND - Is the following correct: Input file name=${latest.mp3.file} / Date=${cbc.sermon.month}/${cbc.sermon.day}/${cbc.sermon.year}?  [Yy]es, [Nn]o"
       validargs="Yes,yes,Y,y,No,no,N,n"
       addproperty="valid.input.data"
     />

     <condition property="abort.input.data">
       <or>
         <equals arg1="${valid.input.data}" arg2="no" casesensitive="false"/>
         <equals arg1="${valid.input.data}" arg2="n" casesensitive="false"/>
       </or>
     </condition>

     <antcall target="abort_input_data">
       <param name="abort.message" value="Rerun the weekly_sermon target, taking appropriate action or specifying the correct data."/>
     </antcall>

     <property name="cbc.sermon.file" value="cbcserm${cbc.sermon.month}.${cbc.sermon.day}.20${cbc.sermon.year}"/>
     <echo>INFO - This script will produce ${cbc.sermon.file} from input MP3 file ${latest.mp3.file}.</echo>

     <available file="${latest.mp3.file}" property="latest.mp3.file.found"/>
     <fail unless="latest.mp3.file.found"
       message="ERROR - Input MP3 file (${latest.mp3.file}) not found.  Cannot continue!  Rerun the weekly_sermon target with the correct input file name and location."/>

     <copy file="${latest.mp3.file}" 
           tofile="ServerFiles/${cbc.sermon.file}.mp3"
           verbose="true"/>

     <antcall target="modify_html_file">
       <param name="cbc.sermon.month" value="${cbc.sermon.month}"/>
       <param name="cbc.sermon.day" value="${cbc.sermon.day}"/>
       <param name="cbc.sermon.year" value="${cbc.sermon.year}"/>
       <param name="cbc.sermon.file" value="${cbc.sermon.file}"/>
     </antcall>

     <antcall target="ftp_file">
       <param name="ftp.file" value="ServerFiles/${cbc.sermon.file}.mp3"/>
       <param name="ftp.binary.mode" value="true"/>
     </antcall>
     <antcall target="ftp_file">
       <param name="ftp.file" value="ServerFiles/cbcmedia.html"/>
     </antcall>
  </target>


  <target name="ftp_file"
    description="FTP a file to the CBC server (called by weekly_sermon).  &#13;&#10;                   For example: build ftp_file -Dftp.file=ServerFiles/cbcserm09.02.2012.mp3 -Dftp.binary.mode=true &#13;&#10;                   You must specify credentials via env. vars. FTP_USERID and FTP_PASSWORD">
 
    <property environment="sysenv"/>
    <property name="ftp.userid"      value="${sysenv.FTP_USERID}"/>
    <property name="ftp.password"    value="${sysenv.FTP_PASSWORD}"/>
    <property name="ftp.binary.mode" value="false"/>

    <echo>INFO - Attempting to FTP file ${ftp.file} (format binary=${ftp.binary.mode}) to cbcofconcrete.org...</echo>
    <ftp server="cbcofconcrete.org"
         userid="${ftp.userid}"
         password="${ftp.password}"
         verbose="true"
         binary="${ftp.binary.mode}"
         action="put"
         remotedir="httpdocs"
         >
      <fileset file="${ftp.file}"/>
    </ftp>
  </target>


  <target name="is_server_up"
    description="Attempt to access cbcofconcrete.org FTP server to assess whether the process will succeed.">
 
    <property environment="sysenv"/>
    <property name="ftp.userid"      value="${sysenv.FTP_USERID}"/>
    <property name="ftp.password"    value="${sysenv.FTP_PASSWORD}"/>
    <property name="ftp.binary.mode" value="false"/>

    <echo>INFO - Attempting to access cbcofconcrete.org FTP server...</echo>
    <ftp server="cbcofconcrete.org"
         userid="${ftp.userid}"
         password="${ftp.password}"
         verbose="true"
         action="list"
         listing="listing.txt"
         >
      <fileset file="${ftp.file}"/>
    </ftp>
    <delete file="listing.txt"/>
  </target>


  <target name="modify_html_file"
          description="Modify the cbcmedia.html file for a weekly sermon (called by weekly_sermon).">

     <property name="pyfile"  value="${cbc.sermon.file}.mp3"/>
     <property name="pyyear"  value="${cbc.sermon.year}"/>
     <property name="pymonth" value="${cbc.sermon.month}"/>
     <property name="pyday"   value="${cbc.sermon.day}"/>
     <property name="cbc.sermon.speaker" value="Pastor Rob Thomas"/>

     <echo>INFO - This script will add ${cbc.sermon.file}.mp3 to cbcmedia.html.</echo>

     <input
       message="RESPOND - Input the sermon title:"
       addproperty="pytitle"/>
     <echo>INFO - The sermon title specified is:${pytitle}.</echo>

     <input
       message="RESPOND - Input the Bible passage (e.g. 1Peter 1:3-5):"
       addproperty="pypassage"/>
     <echo>INFO - The sermon passage specified is:${pypassage}.</echo>
      
     <input
       message="RESPOND - Input the speaker's name press enter to accept the default:"
       defaultvalue="${cbc.sermon.speaker}"
       addproperty="pyspeaker"/>
     <echo>INFO - The speaker specified is: ${pyspeaker}.</echo>

     <input
       message="RESPOND - Is the following correct: Title=${pytitle} / Passage=${pypassage} / Speaker=${pyspeaker}? [Yy]es, [Nn]o"
       validargs="Yes,yes,Y,y,No,no,N,n"
       addproperty="valid.sermon.data"
     />

     <condition property="abort.sermon.data">
       <or>
         <equals arg1="${valid.sermon.data}" arg2="no"  casesensitive="false"/>
         <equals arg1="${valid.sermon.data}" arg2="n"  casesensitive="false"/>
       </or>
     </condition>

     <antcall target="abort_sermon_data">
       <param name="abort.message" value="Rerun the weekly_sermon target and specify the correct input data."/>
     </antcall>

     <tstamp>
       <format property="backup.time" pattern="hhmmss"/>
     </tstamp>
     <property name="html.backup.file" value="ServerFiles/cbcmedia.html-BACKUP${backup.time}"/>
     <copy file="ServerFiles/cbcmedia.html" tofile="${html.backup.file}"/>
     <echo>INFO - HTML backup file is: ${html.backup.file}</echo>
     
    <script language="jython"
            classpath="${jar.bsf}:${jar.commons-logging}:${jar.jython}">
import os
import string
import calendar
import datetime

print 'Processing %s to cbcmedia.html' % (pyfile)

months = {'01':'January', '02':'February', '03':'March', '04':'April', '05':'May', '06':'June', '07':'July', '08':'August', '09':'September', '10':'October', '11':'November', '12':'December'}

MonthMenu = "&lt;li&gt;&lt;a href=\"#" + string.lower(months[pymonth]) + "20" + pyyear + "\"&gt;&lt;font size=\"+1\" color=\"#000125\"&gt;" + months[pymonth] + " 20" + pyyear + "&lt;/font&gt;&lt;/a&gt;&lt;/li&gt;\n"
CommentedMenu = "&lt;!-- &lt;li&gt;&lt;a href=\"#" + string.lower(months[pymonth]) + "YYYY\"&gt;&lt;font size=\"+1\" color=\"#000125\"&gt;" + months[pymonth] + " YYYY&lt;/font&gt;&lt;/a&gt;&lt;/li&gt; --&gt;\n"

outlist = []

try:
  if os.path.exists("./ServerFiles") and os.path.isfile("ServerFiles/cbcmedia.html"):
    print "Expected files and file structure found OK."

    infile = open("ServerFiles/cbcmedia.html","r")
    list = infile.readlines()
    infile.close()

    mBeginMonth = " ### BEGIN MONTH " + string.lower(months[pymonth])
    mID = pymonth + pyday + pyyear
    mIDString = "&lt;a name=\"" + mID + "\"&gt;&lt;/a&gt;" 
    mEntry = "&lt;li&gt;&lt;b&gt;\"" + pytitle + "\" (" + pypassage + ")&lt;/b&gt; - " + calendar.month_name[string.atoi(pymonth)] + " " + pyday + ", 20" + pyyear + "&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp&amp;nbsp;" + pyspeaker + "  | &lt;a href=\"" + pyfile + "\"&gt;&lt;font color=\"C44F79\"&gt;&lt;b&gt;Download&lt;/b&gt;&lt;/font&gt;&lt;/a&gt;&lt;/li&gt; \n" 
    mIDPrefix = "a name=\""                                      
    inMonth = "false"
    inEntry = "false"
    doneWithMonthID = "false"

    #print "Begin loop..."
    for line in list:
      # 1. Ensure left link is enabled
      if line == CommentedMenu:
        outlist.append(MonthMenu)
        #print line
        continue

      # 2. If month section ensure it's uncommented
      if string.find(line, mBeginMonth) != -1:
        #print "BEGINNING MONTH..."
        inMonth = "true"
        if string.find(line, "--&gt;") == -1:
          outlist.append("&lt;!--" + mBeginMonth + " --&gt; \n")
        else:
          outlist.append(line)
        #print line
        continue

      # Fix Month ID
      if inMonth == "true":
        if string.find(line, mIDPrefix + "#" + string.lower(calendar.month_name[string.atoi(pymonth)])+"YYYY") != -1:
          outlist.append(string.replace(line,"YYYY","20"+pyyear))
          #print "FIXING MONTH HEADER ..."
          #print line
          continue
        #else:
          #print "DIDN'T FIND ID was looking for: %s" % mIDPrefix + "#" + string.lower(calendar.month_name[string.atoi(pymonth)])+"YYYY" 

      # 3. Signal to begin looking for place to insert sermon
      if inMonth == "true":
        if string.find(line, "### BEGIN MONTH LIST") != -1:
          inEntry = "true"
          if string.find(line, "### BEGIN MONTH LIST") == 0:
            outlist.append("&lt;!-- ### BEGIN MONTH LIST --&gt; \n")
          else:
            outlist.append(line)
          #print line
          continue

      # Fix header
      if inMonth == "true":
        if string.find(line, string.upper(calendar.month_name[string.atoi(pymonth)]) + " " + "YYYY") != -1:
          #print "Replacing line: %s" % line
          outlist.append(string.replace(line,"YYYY","20"+pyyear))
          #print string.replace(line,"YYYY","20"+pyyear)
          continue
      
      # 4. Add (or replace) Sunday's sermon
      if inEntry == "true":
        #print "In entry ..."

        # 5. If end of month then insert sermon entry and ensure end of month comment replaced.
        if string.find(line, "### END MONTH ") != -1:
          #print "End of month ..."
          outlist.append(mIDString + mEntry) 
          #print "NEW ENTRY ..."
          outlist.append("&lt;!-- ### END MONTH "+pymonth+"--&gt; \n")
          inEntry = "false"
          inMonth = "false"
          #print line
          continue
        # 6. Else if not end of month create ID and see if insert location
        elif string.find(line, mIDPrefix) != -1:
          #print "Previous entry found ..."
          mIDfromline = line[9:15] 
          #print "  ID=%s" % (mID)
          #print "  IDfromline = %s" % (mIDfromline)
          if mIDfromline == mID:
            #print "REPLACING ..."
            outlist.append(mIDString + mEntry) 
            inMonth = "false"
            inEntry = "false"
          elif mIDfromline &lt; mID:
            #print "ADDING ..."
            outlist.append(mIDString + mEntry) 
            outlist.append(line) 
            inEntry = "false"
          else:
            outlist.append(line) 
            #print "SKIPPING ..."
          #print "DONE WITH ENTRY."
          #print line
          continue
      else:
        if string.find(line, "### END MONTH ") != -1:
          #print "End of month and entry ..."
          #print line
          inMonth = "false"
      #print line
      outlist.append(line) 
    outfile = open("ServerFiles/cbcmedia.html","w")
    outfile.writelines(outlist)
  else:
    print "ERROR - Expected files not found. Verify that you are executing from expected location."
  outfile.close()
except:
  print "ERROR - Process failed - you should verify the integrity of your files.  cbcmedia.html will have had a backup made that you can rename/move back to cbcmedia for rerunning."
  raise
    </script>
  </target>

  <target name="year_change"
          description="At year change rename cbcmedia.html and create a new file.">
    <input
      message="RESPOND - What is the old year?"
      validargs="2017,2018,2019,2020,2021,2022,2023,2024,2025,2026"
      addproperty="old.year"/>
     <property name="pyoldyear"  value="${old.year}"/>

     <move file="ServerFiles/cbcmedia.html" tofile="ServerFiles/cbcmedia${old.year}.html"/>
     <tstamp>
       <format property="backup.time" pattern="hhmmss"/>
     </tstamp>
     <copy file="ServerFiles/cbcmedia-Template.html" tofile="ServerFiles/cbcmedia-Template.html-BACKUP${backup.time}"/>
     <script language="jython"
             classpath="${jar.bsf}:${jar.commons-logging}:${jar.jython}">
import os
import string
outlist = []
try:
  if os.path.exists("./ServerFiles") and os.path.isfile("ServerFiles/cbcmedia-Template.html"):
    print "INFO - Expected files and file structure found OK."

    infile = open("ServerFiles/cbcmedia-Template.html","r")
    list = infile.readlines()
    infile.close()
    InsertLocation="INSERT OLD YEARS HERE"
    for line in list:
      outlist.append(line) 
      if string.find(line, InsertLocation) != -1:
        outlist.append(" &lt;li&gt;&lt;a href=\"cbcmedia"+pyoldyear+".html\"&gt;&lt;font size=\"+1\" color=\"#000125\"&gt;"+pyoldyear+" Sermons&lt;/font&gt;&lt;/a&gt;&lt;/li&gt;")
    outfile = open("ServerFiles/cbcmedia-Template.html","w")
    outfile.writelines(outlist)
    outfile.close()
  else:
    print "ERROR - Expected files not found. Verify that you are executing from expected location."
except:
  print "ERROR - Process failed - you should verify the integrity of your files."
  print "ERROR -   cbcmedia-Template.html will have had a backup made (ServerFiles/cbcmedia-Template.html-BACKUP${backup.time})"
  print "ERROR -   The previous cbcmedia.html file has been renamed to ServerFiles/cbcmedia${old.year}.html"
  print "ERROR - Check these files and rename as needed before rerunning."
  raise
</script>

    <copy file="ServerFiles/cbcmedia-Template.html" tofile="ServerFiles/cbcmedia.html"/>

    <antcall target="ftp_file">
      <param name="ftp.file" value="ServerFiles/cbcmedia${old.year}.html"/>
    </antcall>
    <antcall target="ftp_file">
      <param name="ftp.file" value="ServerFiles/cbcmedia.html"/>
    </antcall>
  </target>
  
  
  <target name="verify_sunday">
    <property name="pyyear"  value="${cbc.sermon.year}"/>
    <property name="pymonth" value="${cbc.sermon.month}"/>
    <property name="pyday"   value="${cbc.sermon.day}"/>
    <script language="jython"
            classpath="${jar.bsf}:${jar.commons-logging}:${jar.jython}">
import os
import string
import calendar
import datetime

day = calendar.weekday(string.atoi(pyyear), string.atoi(pymonth), string.atoi(pyday))                          
if day != 6:
  print "WARNING - The date specified is not a Sunday!"
else:
  print "INFO - Confirmed the specified date (" + pymonth + "/" + pyday +"/" + pyyear + ") is a Sunday."
    </script>
  </target>


  <target name="generate_ministries"
          description="Read CBC-Ministries.txt, rewrite CBC Ministries.html, and FTP to web site.">

    <antcall target="py_ministries">
       <param name="input.file" value="cbcministries.txt"/>
       <param name="html.file"  value="cbcministries.html"/>
    </antcall>
    
    <antcall target="ftp_file">
      <param name="ftp.file" value="ServerFiles/cbcministries.html"/>
    </antcall>
    
  </target>
  
  
  <target name="py_ministries">
    <property name="pytext"  value="${input.file}"/>
    <property name="pyhtml"  value="${html.file}"/>
    <script language="jython"
            classpath="${jar.bsf}:${jar.commons-logging}:${jar.jython}">
import os
import string


print("INFO - Starting HTML generation process.")

inputPath = "./ServerFiles"
textFile = "/" + pytext

try:
  
  # Process input data
  if os.path.exists(inputPath) and os.path.isfile(inputPath + textFile):
    print ("INFO - Expected files and file structure for " + inputPath + textFile + " found OK.")
    
    infile = open(inputPath + textFile,"r")
    ministries = infile.readlines()
    infile.close()
    
    newHtml = []
    
    bulletCount=0
    
    for line in ministries:
      titleLoc = line.find("Title:")
      if (titleLoc != -1):
        # Identify Title: lines
        
        # Terminate a list of bullets before inserting a new title
        if (bulletCount != 0):
          newHtml.append('&lt;/UL&gt;&lt;br&gt;')
        #endIf
        bulletCount=0
        title=line[titleLoc + len("Title:"):]
        title=title.strip()
        newHtml.append('&lt;P align="left"&gt;&lt;FONT color="#000125" size="+2"&gt;&lt;I&gt;&lt;B&gt;' + title + '&lt;/B&gt;&lt;/I&gt;&lt;/FONT&gt;&lt;/P&gt;')
      else:
        # Process other lines
        
        # Check for lines with "* "
        asteriskLoc = line.find("* ")
        if (asteriskLoc != -1):
          line = line[asteriskLoc + len("* "):]
        #endIf
        
        # Process lines only if they have a label:/data pair
        lineData = line.split(":")
        if (len(lineData) > 1):
          if (bulletCount == 0):
            newHtml.append('&lt;UL type="circle"&gt;')
          #endIf
          
          # This is a "spacier" format:
          #newHtml.append('&lt;LI&gt;&lt;P align="left"&gt;&lt;FONT size="+1"&gt;&lt;B&gt;' + lineData[0] + '&lt;/B&gt;: ' + lineData[1] + '&lt;/FONT&gt;&lt;/P&gt;&lt;/LI&gt;\n')
          newHtml.append('&lt;LI&gt;&lt;FONT size="+1"&gt;&lt;B&gt;' + lineData[0] + '&lt;/B&gt;: ' + lineData[1] + '&lt;/FONT&gt;&lt;/LI&gt;')
          bulletCount += 1
        #endIf
      #endIf
    #endFor
    
    print("INFO - Done reading input data.")
    
  else:
    print ("ERROR - Expected file " + inputPath + textFile + " not found. Verify that you are executing from expected location.")
  #endIf
  
  
  htmlFile = "/" + pyhtml
  
  # Process HTML file
  if os.path.exists(inputPath) and os.path.isfile(inputPath + htmlFile):
    print ("INFO - Expected files and file structure for " + inputPath + htmlFile + " found OK.")
    infile = open(inputPath + htmlFile,"r")
    html = infile.readlines()
    infile.close()
    
    beginEntry="&lt;!-- ((( --&gt;"
    endEntry="&lt;!-- ))) --&gt;"
    throwAway = False
    htmlLines = []
    
    for line in html:
      
      beginLoc = line.find(beginEntry)
      if (beginLoc != -1):
        # We start throwing lines away
        throwAway = True
        htmlLines.append(line)
        continue
      #endIf
      endLoc = line.find(endEntry)
      if (endLoc != -1):
        # We stop throwing lines away
        #print ("Stop throwing away")
        throwAway = False
        for line2 in newHtml:
          htmlLines.append(line2)
        #endFor
        
        htmlLines.append(" ")
        htmlLines.append(line)
        continue
      #endIf
      if (throwAway):
        # Actually throw a line away
        continue
      else:
        # Keep a line, pass through
        htmlLines.append(line)
      #endIf
    #endFor
    
    print ("INFO - Rewriting " + inputPath + htmlFile + ".")
    outfile = open(inputPath + htmlFile,"w")
    for  line in htmlLines:
      if (str(line).endswith('\n')):
        outfile.write("%s" % line)
      else:
        outfile.write("%s\n" % line)
      #endIf
    #endFor
    
    outfile.close()
    
  else:
    print ("ERROR - Expected file " + inputPath + htmlFile + " not found. Verify that you are executing from expected location.")
    raise
  #endIf
  
except:
  print ("ERROR - Process failed - you should verify the integrity of your files:")
  print ("        " + inputPath + textFile)
  print ("        " + inputPath + htmlFile)
  raise 
#endTry
    </script>
  </target>
  
  
  <target name="abort_input_data" if="abort.input.data">
    <echo>ERROR - abort.input.data=${abort.input.data}</echo>
    <fail message="ERROR - ${abort.message}"/>
  </target>
  
  <target name="abort_sermon_data" if="abort.sermon.data">
    <fail message="ERROR - ${abort.message}"/>
  </target>
  
</project>
